#!/usr/bin/env python

# python libraries
import sys, optparse

# dlcpar libraries
import dlcpar
from dlcpar import reconlib

# rasmus libraries
from rasmus import treelib
from rasmus import util

# compbio libraries
from compbio import phylo, phyloDLC

#=============================================================================
# parser

parser = optparse.OptionParser(usage="%prog <prefix 1> <prefix 2>")
parser.add_option("-s", "--stree", dest="stree",
                  metavar="<species tree>",
                  help="species tree file in newick format")
options, args = parser.parse_args()

if not options.stree:
    parser.error("-s/--stree required")
if len(args) != 2:
    parser.error("must specify two trees")

#=============================================================================
# utilities

def remove(tree, recon):
    # remove unnecessary nodes from gene tree and recon
    # e.g. a node that ...
    # 1) has a single child, and either
    # 2a) is the root, or
    # 2b) is in the same species as its parent, and
    #     is in the same locus as its parent
    species_map = recon.species_map
    locus_map = recon.locus_map
    order = recon.order

    for node in list(tree.preorder()):
        parent = node.parent
        children = node.children

        if len(children) == 1:
            child = children[0]
            if (not parent) or \
                (parent and \
                 species_map[node] == species_map[parent] and \
                 locus_map[node] == locus_map[parent]):
                # update recon
                # these nodes are leaves and so are never in order
                # if the node has the same locus as its parent
                del locus_map[node]
                del species_map[node]

                # update gene tree
                phylo.remove_spec_node(node, tree)


def remap(tree):
    # remap internal node names based on leaves
    leaves = {}
    names = {}
    names_set = set()
    for node in tree.postorder():
        if node.is_leaf():
            leaves[node] = [node.name]
        else:
            leaves[node] = []
            for child in node.children:
                leaves[node].extend(leaves[child])
            leaves[node].sort()
        names[node] = tree.unique_name(str(tuple(leaves[node])), names_set)

    for node in list(tree):
        tree.rename(node.name, names[node])


#=============================================================================
# main

# read files
stree = treelib.read_tree(options.stree)

recon1 = reconlib.LabeledRecon()
gene_tree1, extra1 = recon1.read(args[0], stree)

recon2 = reconlib.LabeledRecon()
gene_tree2, extra2 = recon2.read(args[1], stree)

# compare
tree1 = gene_tree1.copy()
treelib.remove_single_children(tree1)

tree2 = gene_tree2.copy()
treelib.remove_single_children(tree2)

hash1 = phylo.hash_tree(tree1)
hash2 = phylo.hash_tree(tree2)

if hash1 != hash2:
    print >>sys.stderr, "gene tree mismatch"
    eq = False
else:
    # process trees and recons
    remove(gene_tree1, recon1)
    remove(gene_tree2, recon2)

    remap(gene_tree1)
    remap(gene_tree2)

    # compare
    if recon1 != recon2:
        eq = False
    else:
        eq = True
print eq

if eq:
    sys.exit(0)
else:
    sys.exit(1)

