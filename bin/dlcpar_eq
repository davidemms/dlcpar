#!/usr/bin/env python

# python libraries
import sys, optparse

# dlcpar libraries
import dlcpar
from dlcpar import reconlib

# rasmus libraries
from rasmus import treelib
from rasmus import util

# compbio libraries
from compbio import phylo, phyloDLC

#=============================================================================
# parser

parser = optparse.OptionParser(usage="%prog <prefix 1> <prefix 2>")
parser.add_option("-s", "--stree", dest="stree",
                  metavar="<species tree>",
                  help="species tree file in newick format")
options, args = parser.parse_args()

if not options.stree:
    parser.error("-s/--stree required")
if len(args) != 2:
    parser.error("must specify two trees")

#=============================================================================
# main

# read files
stree = treelib.read_tree(options.stree)

recon1 = reconlib.LabeledRecon()
gene_tree1, extra1 = recon1.read(args[0], stree)

recon2 = reconlib.LabeledRecon()
gene_tree2, extra2 = recon2.read(args[1], stree)

# compare
hash1 = phylo.hash_tree(gene_tree1)
hash2 = phylo.hash_tree(gene_tree2)
if hash1 != hash2:
    print >>sys.stderr, "gene tree mismatch"
    eq = False
else:
    # map gene_tree1 and gene_tree2 to same internal node names
    def remap(tree):
        leaves = {}
        names = {}
        names_set = set()
        for node in tree.postorder():
            if node.is_leaf():
                leaves[node] = [node.name]
            else:
                leaves[node] = []
                for child in node.children:
                    leaves[node].extend(leaves[child])
                leaves[node].sort()
            names[node] = tree.unique_name(str(tuple(leaves[node])), names_set)

        for node in list(tree):
            tree.rename(node.name, names[node])
    remap(gene_tree1)
    remap(gene_tree2)

    # compare
    if recon1 != recon2:
        eq = False
    else:
        eq = True
print eq

if eq:
    sys.exit(0)
else:
    sys.exit(1)

